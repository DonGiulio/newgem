h1. New Gem Generator

h1. &#x2192; using 'rubyforge'

The New Gem Generator makes it very easy for you to upload your gems to RubyForge, thanks to the integration of the <code>hoe</code> and <code>rubyforge</code> gems, by "Ryan Davis":http://blog.zenspider.com/.

This page describes how to setup the _rubyforge_ application (lowercase rubyforge = the application), create new RubyForge projects (uppercase RubyForge = the website for hosting gems and homepages), and releasing your gems and their future versions to RubyForge using _rubyforge_.

h2. Get a RubyForge project.

RubyForge is a great site for uploading gems, as the default settings of all RubyGems users is to look for new gems there. You can run your own gem server, but here we'll assume you're uploading to RubyForge.

Additionally, you can host more than one gem on each project. The Magic Models project hosts several gems, each with different versions.

To host your gems you'll need a Project. Apply for it asap as it takes a day or so for the RubyForge admins to accept and generate your project.

*Note:* the name of your project does not have to match the name of any of your gems. 

h3. Setup access to RubyForge

Your new gem will use the rubyforge app to upload your gem. So first we need to set it up.

<pre>$ sudo gem install rubyforge
$ rubyforge setup
$ mate ~/.rubyforge/user-config.yml
</pre>

This creates a configuration folder <code>.rubyforge</code> in your home folder (on Windows it is XXXXXX). The last line is to edit the config file.

The only two lines to set are your RubyForge *username* and *password*. Ignore the rest.

<pre>$ rubyforge config</pre>

This generates a file <code>~/.rubyforge/auto-config.yml</code> which will be mostly empty now, but one day will be full of projects and all the releases of different versions of gems. One day soon I hope.

Just like the website, all other operations require you to login first.

<pre>$ rubyforge login</pre>
