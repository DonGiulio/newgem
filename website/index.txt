h1. New Gem Generator

h1. &#x2192; 'newgem'

h2. What

Quickly bundle any Ruby libraries into a RubyGem and share it with the world, your colleagues, or perhaps just with yourself amongst your projects.

RubyGems are centrally stored, versioned, and support dependencies between other gems, so they are the ultimate way to bundle libraries, executables, associated tests, examples, and more.

Within this gem, you get one thing - <code>newgem</code> - an executable to create your own gems. Your new gems will include designated folders for Ruby code, test files, executables, and even a default website page for you to explain your project, and which instantly uploads to RubyForge website (which looks just like this one by default)

h2. Installing

The <code>newgem</code> application is distributed itself as a RubyGem and is available immediately after installation.

<pre syntax="ruby">sudo gem install newgem</pre>

Alternately, download the gem and install manually.

h2. The basics

Go to the folder where you want to create your new gem folder structure, and run the <code>newgem</code> command to generate your gem scaffolding.

<pre>$ cd ~/ruby_projects
$ newgem wizzo
creating: wizzo
creating: wizzo/CHANGELOG.txt
creating: wizzo/README.txt
creating: wizzo/lib
creating: wizzo/scripts
creating: wizzo/website
creating: wizzo/website/javascripts
creating: wizzo/website/stylesheets
creating: wizzo/lib/wizzo
creating: wizzo/lib/wizzo.rb
creating: wizzo/lib/wizzo/version.rb
creating: wizzo/bin
creating: wizzo/test
creating: wizzo/test/test_helper.rb
creating: wizzo/test/test_wizzo.rb
creating: wizzo/examples
creating: wizzo/setup.rb
creating: wizzo/Rakefile
creating: wizzo/Manifest.txt
creating: wizzo/History.txt
creating: wizzo/scripts/txt2html
creating: wizzo/website/index.txt
creating: wizzo/website/template.rhtml
copying: wizzo/website/javascripts/rounded_corners_lite.inc.js
copying: wizzo/website/stylesheets/screen.css
NOW - update wizzo/Rakefile with gem description, etc
</pre>

h3. Setup

Now modify the constants at the top of *Rakefile*, with your name, email and the location where you'll host your website for the gem. The defaults are tied to RubyForge for uploading the gems and the website (see below).

h3. Create code and tests

Then create your libraries (files in <code>lib</code>) and your tests (files in <code>test</code> that look like <code>test_TESTNAME.rb</code>). John Grey III did a nice video on test-driven design, that's worth watching if TDD is new to you.

If you create any new files, you need to manually add them to the Manifest.txt. Alphabetical order is optional, but it will make the results of <code>rake check_manifest</code> look clean if you keep them ordered. If a file is not in the Manifest.txt it will not be included in the gem when you package and release it.

h3. Executables

You can include executable Ruby applications in your gem, which will be accessible on Windows and Unix/Linux/MacOS, by creating scripts in the <code>bin</code> folder. When the gem is deployed by users, these executables will be automatically placed within their path.

h3. Website

The final step before releasing your gem to the world is the all-important website. Edit the file <code>website/index.txt</code> using Textile/Redcloth syntax. Syntax highlighting is also supported (see below). If you need more website pages, create more *txt* files in the website folder. 

Run the rake task <code>rake website_generate</code> to convert all your website txt files into html files.

NOTE: Currently, the initial <code>index.txt</code> file includes my details not yours. Currently you need to change this manually.

If you don't want a website, remove the <code>website</code> related files from the Manifest.txt. 

Make sure you've generated the <code>website/index.html</code> file before continuing to package and release your gem (unless you remove it from the Manifest.txt).

h2. Package and test locally

Before releasing a new version of a gem, it is a great idea to install the gem locally and do some sanity checks. You know, to limit the chance of you looking like a noob.

h3. Change the gems version number

The version number is set in the file <code>lib/#gem name#/version.rb</code>. Update it as appropriate with major, minor and bug fix numbers. This value will be used when generating your website, for example.

h3. Check the manifest

<blockquote>Manifest: a customs document listing the contents put on a ship or plane.</blockquote>
<cite>"Google - define:manifest":http://www.google.com/search?q=define%3Amanifest</cite>

Similarly here, a manifest is the log of the files to be packaged into a gem. If its not in the <code>Manifest.txt</code> file, the users won't get it.

Before you package your gem, you can compared the list of files in your gem folder, with the Manifest.txt:

<pre>rake check_manifest</pre>

The results show a _diff_ of the two.

h3. Installation

<pre>rake install_gem</pre>

This will repackage your code as a gem and install it as a local gem with the new version number.

Now pretend to be a user, and do some tests - especially of new functionality - so you are comfortable all the files have been packaged up, and you haven't missed anything in the <code>Manifest.txt</code>.

One set of tests you should do is to repeat any tutorials you include in your website. If your gem is dependent on other gems that are rapidly changing, its possible your tutorial might be invalid even if your unit tests are successful. Best you find any errors before the users start emailing you!

h2. Releasing your gem to the world

Once you're ready for release there are some final steps. 

<a name="setup_rubyforge"></a>
	

h3. Setup your environment to upload to RubyForge.

There are several steps you need to perform initially to "setup your environment for uploading gems to RubyForge":rubyforge.html.


h3. Document changes in History.txt

Between each version of your gem, you probably changed something. You should document this in the <code>History.txt</code> file. For each new release, you need to add two paragraphs that look like this:

<pre>+++ 0.5.4 14/4/2007
	
+ 1 major improvement
    + 150% more Wizzos
+ 2 bug fixes
    + Wizzos are the proper colour
    + You only get Wizzos when you ask for them
</pre>

The two paragraphs will be automatically picked up by the following release process and documented against the release on RubyForge site. To see an example of the end result, look at the "*Changes* section for hoe 1.2":http://rubyforge.org/frs/shownotes.php?release_id=9695.

The History.txt notes for your first release have already been started for you.

h3. Generate and upload the website

The rake task <code>rake website_upload</code> will upload the website into a RubyForge project. 

Or use the task <code>rake website</code>, which performs both the generation and the upload.

h3. Release the gem

Run <code>rake release VERSION=X.Y.Z</code> after you've done all these steps, and your gem will be repackaged and released to RubyForge.

It can take an hour or two before new gem releases are available via the gem installer. But when they are ready, everyone will be able to download and install your gem using:

<pre>sudo gem install #gem_name#</pre>

h2. Bonus tasks thanks to Hoe

Your gem uses the Hoe gem to provide a dozen or so useful rake tasks for managing your gem, such as <code>release</code>.

See them all with:

<pre>rake -T</pre>

Remember, the Rakefile is yours to extend as you please with more rake tasks, such as the <code>website</code> tasks already added.

For more information about each task, see the "Hoe README":http://seattlerb.rubyforge.org/hoe/

h2. Related articles

* "Original blog article and tutorial":http://drnicwilliams.com/2006/10/11/generating-new-gems/

h2. Dr Nic's Blog

"http://www.drnicwilliams.com":http://www.drnicwilliams.com - for future announcements and
other stories and things.

h2. Forum

"http://groups.google.com/group/new-gem-generator":http://groups.google.com/group/new-gem-generator

h2. Licence

This code is free to use under the terms of the MIT licence. 

h2. Contact

Comments are welcome. Send an email to "Dr Nic Williams":mailto:drnicwilliams@gmail.com.
